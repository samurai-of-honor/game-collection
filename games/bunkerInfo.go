package games

import (
	"fmt"
	"math/rand"
	"strconv"
	"time"
)

type Info struct {
	Square          int
	StayTime        string
	FoodStocks      string
	MedicalOffice   string
	GreenHouses     string
	Armory          string
	AdditionalItem1 string
	AdditionalItem2 string
}

// TimeFormatter generate time and add an ending
func TimeFormatter() string {
	timeCategory := rand.Intn(3)
	timeStr := strconv.Itoa(Time[timeCategory][rand.Intn(len(Time[timeCategory]))])
	switch timeCategory {
	case 0:
		timeStr += " –¥–Ω—ñ–≤"
	case 1:
		timeStr += " –º—ñ—Å—è—Ü—å(-—ñ–≤)"
	case 2:
		timeStr += " —Ä–æ–∫—ñ–≤"
	}
	return timeStr
}

func BunkerInfo() string {
	i := new(Info)
	rand.Seed(time.Now().Unix()) // initialize pseudo random generator

	i.Square = Square[rand.Intn(len(Square))]

	// Formation of additional rooms
	if i.Square < 49 {
		i.MedicalOffice = IsOrIsnt[1]
		i.GreenHouses = IsOrIsnt[1]
		i.Armory = IsOrIsnt[1]
	} else {
		i.MedicalOffice = IsOrIsnt[rand.Intn(2)]
		i.GreenHouses = IsOrIsnt[rand.Intn(2)]
		i.Armory = IsOrIsnt[rand.Intn(2)]
	}

	i.StayTime = TimeFormatter()
	i.FoodStocks = TimeFormatter()

	// Formation of additional items
	if rand.Intn(7) == 0 {
		i.AdditionalItem1 = " –Ω—ñ—á–æ–≥–æ"
	} else {
		i.AdditionalItem1 = AdditionalItems[rand.Intn(len(AdditionalItems))]
	}
	if rand.Intn(7) == 0 {
		i.AdditionalItem2 = " –Ω—ñ—á–æ–≥–æ"
	} else {
		i.AdditionalItem2 = AdditionalItems[rand.Intn(len(AdditionalItems))]
	}

	info := fmt.Sprintf("üî≤ <b>–ü–ª–æ—â–∞:</b> <i>%d –º2</i>\n‚è± <b>–ß–∞—Å –ø–µ—Ä–µ–±—É–≤–∞–Ω–Ω—è:</b> <i>%s</i>\nüç≤ <b>–ó–∞–ø–∞—Å—ñ–≤ –≤–æ–¥–∏ —ñ —ó–∂—ñ –Ω–∞:</b> <i>%s</i>\n",
		i.Square, i.StayTime, i.FoodStocks)
	info += fmt.Sprintf("üè• <b>–ú–µ–¥–∏—á–Ω–∏–π –∫–∞–±—ñ–Ω–µ—Ç:</b> <i>%s</i>\nüåø <b>–ì–æ—Ä–æ–¥ —ñ–∑ —Ç–µ–ø–ª–∏—Ü—è–º–∏:</b> <i>%s</i>\nüî´ <b>–ó–±—Ä–æ—è—Ä–Ω—è:</b> <i>%s</i>\n",
		i.MedicalOffice, i.GreenHouses, i.Armory)
	info += fmt.Sprintf("üì¶ <b>–î–æ–¥–∞—Ç–∫–æ–≤–∏–π –ø—Ä–µ–¥–º–µ—Ç 1:</b>\n<i>%s</i>\nüì¶ <b>–î–æ–¥–∞—Ç–∫–æ–≤–∏–π –ø—Ä–µ–¥–º–µ—Ç 2:</b>\n<i>%s</i>\n",
		i.AdditionalItem1, i.AdditionalItem2)

	return info
}
